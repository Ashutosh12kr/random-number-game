. Class & Fields:
GuessingGame — The main class that encapsulates all the game logic.

Fields:

randomNumber: stores the randomly generated number the player tries to guess.

maxNumber: upper limit for the random number, depends on difficulty.

attempts: counts how many guesses the player has made.

scanner: used to read user input from the console.

2. Constructor:
Initializes the Scanner object to read user input from the terminal.

3. Method: start()
Displays a welcome message.

Runs a loop where the player:

Chooses difficulty level.

Plays the guessing game.

Gets asked if they want to play again.

Closes the scanner and says goodbye once the player exits.

4. Method: chooseDifficulty()
Displays difficulty options:

Easy (1-50)

Medium (1-100)

Hard (1-200)

Reads and validates the player's choice.

Sets maxNumber accordingly.

Generates a random number between 1 and maxNumber.

Resets the attempt counter.

Prompts the player to start guessing.

5. Method: playGame()
Runs a guessing loop until the player guesses correctly.

Each iteration:

Gets a valid guess from the player.

Increments the attempt counter.

Compares guess with randomNumber and provides feedback:

Too low → prompts to try again.

Too high → prompts to try again.

Correct → congratulates and breaks loop.

6. Method: askToPlayAgain()
Prompts the user with a yes/no question to continue playing.

Reads input and returns true if player types "y" (case insensitive), otherwise false.

7. Method: getValidInt(String prompt, int min, int max)
Utility method to safely get an integer input within a specific range.

Repeatedly prompts the user until valid input is entered.

Handles:

Non-integer inputs with error messages.

Out-of-range inputs with warnings.

8. Main Class:
Contains the main() method.

Creates an instance of GuessingGame and starts the game.

Summary:
The program lets users pick difficulty, then tries to guess the number randomly selected within that range.

It handles invalid inputs gracefully, gives feedback on guesses, counts attempts, and supports replaying multiple rounds.

Clean modular structure keeps each responsibility separated for readability and maintainability.

